{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js","useLocation.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","_seasonConfig$season","react_default","a","createElement","className","concat","Spinner","message","defaultProps","ReactDOM","render","content","_useLocation","_useState","useState","_useState2","Object","slicedToArray","setLat","_useState3","_useState4","errorMessage","setErrorMessage","useEffect","window","navigator","geolocation","getCurrentPosition","position","coords","latitude","err","useLocation","_useLocation2","src_SeasonDisplay_0","src_Spinner","document","querySelector"],"mappings":"gKAGMA,SAAe,CACjBC,OAAQ,CACJC,KAAM,qBACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,qBACNC,SAAU,eA4BHE,EAbO,SAAAC,GAElB,IAbeC,EAAKC,EAadC,GAbSF,EAaUD,EAAMC,KAbXC,GAagB,IAAIE,MAAOC,YAXnC,GAAKH,EAAQ,EACdD,EAAM,EAAI,SAAW,SAGrBA,EAAM,EAAI,SAAW,UAKLK,EAGAZ,EAAaS,GAAhCP,EAHmBU,EAGnBV,KAAMC,EAHaS,EAGbT,SACd,OACIU,EAAAC,EAAAC,cAAA,OAAKC,UAAS,mBAAAC,OAAqBR,IAC/BI,EAAAC,EAAAC,cAAA,KAAGC,UAAS,sBAAAC,OAAwBd,EAAxB,WACZU,EAAAC,EAAAC,cAAA,UAAKb,GACLW,EAAAC,EAAAC,cAAA,KAAGC,UAAS,uBAAAC,OAAyBd,EAAzB,aC/BlBe,EAAU,SAACZ,GACb,OACIO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACVV,EAAMa,WAMvBD,EAAQE,aAAe,CACnBD,QAAS,cAGED,QCWfG,IAASC,OACPT,EAAAC,EAAAC,cArBU,WAAM,IAIZQ,EAJYC,ECLlB,WAAqB,IAAAC,EAGKC,mBAAS,MAHdC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GAGVlB,EAHUoB,EAAA,GAGLG,EAHKH,EAAA,GAAAI,EAIuBL,mBAAS,IAJhCM,EAAAJ,OAAAC,EAAA,EAAAD,CAAAG,EAAA,GAIVE,EAJUD,EAAA,GAIIE,EAJJF,EAAA,GAajB,OAPAG,oBAAU,WACNC,OAAOC,UAAUC,YAAYC,mBACzB,SAAAC,GAAQ,OAAIV,EAAOU,EAASC,OAAOC,WACnC,SAAAC,GAAG,OAAIT,EAAgBS,EAAIxB,YAEhC,IAEI,CAACZ,EAAK0B,GDNaW,GAFZC,EAAAjB,OAAAC,EAAA,EAAAD,CAAAJ,EAAA,GAETjB,EAFSsC,EAAA,GAEJZ,EAFIY,EAAA,GAehB,OATEtB,EADEU,EACQpB,EAAAC,EAAAC,cAAA,qBAAakB,GAEhB1B,EACGM,EAAAC,EAAAC,cAAC+B,EAAD,CAAevC,IAAKA,IAGpBM,EAAAC,EAAAC,cAACgC,EAAD,CAAS5B,QAAQ,uCAI3BN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcO,IAK/B,MACAyB,SAASC,cAAc","file":"static/js/main.e5d759c1.chunk.js","sourcesContent":["import './SeasonDisplay.css';\nimport React from 'react';\n\nconst seasonConfig = {\n    summer: {\n        text: 'Lets hit the beach',\n        iconName: 'sun'\n    },\n    winter: {\n        text: 'Burr, it is chilly',\n        iconName: 'snowflake'\n    }\n};\n\nconst getSeason = (lat, month) => {\n\n    if (month > 2 && month < 9) {\n        return lat > 0 ? 'summer' : 'winter';\n    }\n    else {\n        return lat > 0 ? 'winter' : 'summer';\n    }\n};\n\n\nconst SeasonDisplay = props => {\n\n    const season = getSeason(props.lat, new Date().getMonth());\n    const { text, iconName } = seasonConfig[season];\n    return (\n        <div className={` season-display ${season}`}>\n            <i className={` icon-left massive ${iconName} icon`} />\n            <h1>{text}</h1>\n            <i className={` icon-right massive ${iconName} icon`} />\n        </div>\n    );\n};\n\nexport default SeasonDisplay;\n","import React from 'react';\n\nconst Spinner = (props) => {\n    return (\n        <div className=\"ui active inverted dimmer\">\n            <div className=\"ui text loader\">\n                {props.message}\n            </div>\n        </div>\n    );\n};\n\nSpinner.defaultProps = {\n    message: 'Loading...'\n};\n\nexport default Spinner;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner';\nimport useLocation from './useLocation.js';\n\nconst App = () => {\n\n  const [lat, errorMessage] = useLocation();\n\n  let content;\n  if (errorMessage) {\n    content = <div>Error: {errorMessage}</div>;\n  }\n  else if (lat) {\n    content = <SeasonDisplay lat={lat} />;\n  }\n  else {\n    content = <Spinner message=\"Please accept the location request\" />;\n  }\n\n  return (\n    <div className=\"border red\">{content}</div>\n  );\n};\n\nReactDOM.render(\n  <App />,\n  document.querySelector(\"#root\")\n);\n","import { useState, useEffect } from 'react';\n\nexport default () => {\n    // there is no input\n    // but there is some lattitude or the error message as output\n    const [lat, setLat] = useState(null);\n    const [errorMessage, setErrorMessage] = useState('');\n\n    useEffect(() => {\n        window.navigator.geolocation.getCurrentPosition(\n            position => setLat(position.coords.latitude), // succes callback\n            err => setErrorMessage(err.message) // for any errors\n        );\n    }, []); // [] because we only want to run this function once\n\n    return [lat, errorMessage];\n};\n"],"sourceRoot":""}