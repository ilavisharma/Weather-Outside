{"version":3,"sources":["SeasonDisplay.js","Spinner.js","index.js"],"names":["seasonConfig","summer","text","iconName","winter","SeasonDisplay","props","lat","month","season","Date","getMonth","_seasonConfig$season","react_default","a","createElement","className","concat","Spinner","message","defaultProps","App","state","errorMessage","_this2","this","window","navigator","geolocation","getCurrentPosition","position","setState","coords","latitude","err","src_SeasonDisplay_0","src_Spinner","renderContent","React","Component","ReactDOM","render","src_App","document","querySelector"],"mappings":"4LAGMA,SAAe,CACjBC,OAAQ,CACJC,KAAM,qBACNC,SAAU,OAEdC,OAAQ,CACJF,KAAM,qBACNC,SAAU,eA4BHE,EAbO,SAAAC,GAElB,IAbeC,EAAKC,EAadC,GAbSF,EAaUD,EAAMC,KAbXC,GAagB,IAAIE,MAAOC,YAXnC,GAAKH,EAAQ,EACdD,EAAM,EAAI,SAAW,SAGrBA,EAAM,EAAI,SAAW,UAKLK,EAGAZ,EAAaS,GAAhCP,EAHmBU,EAGnBV,KAAMC,EAHaS,EAGbT,SACd,OACIU,EAAAC,EAAAC,cAAA,OAAKC,UAAS,mBAAAC,OAAqBR,IAC/BI,EAAAC,EAAAC,cAAA,KAAGC,UAAS,sBAAAC,OAAwBd,EAAxB,WACZU,EAAAC,EAAAC,cAAA,UAAKb,GACLW,EAAAC,EAAAC,cAAA,KAAGC,UAAS,uBAAAC,OAAyBd,EAAzB,aC/BlBe,EAAU,SAACZ,GACb,OACIO,EAAAC,EAAAC,cAAA,OAAKC,UAAU,6BACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,kBACVV,EAAMa,WAMvBD,EAAQE,aAAe,CACnBD,QAAS,cAGED,QCVTG,6MAEJC,MAAQ,CAAEf,IAAK,KAAMgB,aAAc,uFAEf,IAAAC,EAAAC,KAClBC,OAAOC,UAAUC,YAAYC,mBAC3B,SAAAC,GAAQ,OAAIN,EAAKO,SAAS,CAAExB,IAAKuB,EAASE,OAAOC,YACjD,SAAAC,GAAG,OAAIV,EAAKO,SAAS,CAAER,aAAcW,EAAIf,oDAK3C,OAAIM,KAAKH,MAAMC,eAAiBE,KAAKH,MAAMf,IAClCM,EAAAC,EAAAC,cAAA,qBAAaU,KAAKH,MAAMC,eAG5BE,KAAKH,MAAMC,cAAgBE,KAAKH,MAAMf,IAClCM,EAAAC,EAAAC,cAACoB,EAAD,CAAe5B,IAAKkB,KAAKH,MAAMf,MAGjCM,EAAAC,EAAAC,cAACqB,EAAD,CAASjB,QAAQ,wEAIxB,OACEN,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACZS,KAAKY,wBA1BIC,IAAMC,WAgCxBC,IAASC,OACP5B,EAAAC,EAAAC,cAAC2B,EAAD,MACAC,SAASC,cAAc","file":"static/js/main.f0429d98.chunk.js","sourcesContent":["import './SeasonDisplay.css';\nimport React from 'react';\n\nconst seasonConfig = {\n    summer: {\n        text: 'Lets hit the beach',\n        iconName: 'sun'\n    },\n    winter: {\n        text: 'Burr, it is chilly',\n        iconName: 'snowflake'\n    }\n};\n\nconst getSeason = (lat, month) => {\n\n    if (month > 2 && month < 9) {\n        return lat > 0 ? 'summer' : 'winter';\n    }\n    else {\n        return lat > 0 ? 'winter' : 'summer';\n    }\n};\n\n\nconst SeasonDisplay = props => {\n\n    const season = getSeason(props.lat, new Date().getMonth());\n    const { text, iconName } = seasonConfig[season];\n    return (\n        <div className={` season-display ${season}`}>\n            <i className={` icon-left massive ${iconName} icon`} />\n            <h1>{text}</h1>\n            <i className={` icon-right massive ${iconName} icon`} />\n        </div>\n    );\n};\n\nexport default SeasonDisplay;\n","import React from 'react';\n\nconst Spinner = (props) => {\n    return (\n        <div className=\"ui active inverted dimmer\">\n            <div className=\"ui text loader\">\n                {props.message}\n            </div>\n        </div>\n    );\n};\n\nSpinner.defaultProps = {\n    message: 'Loading...'\n};\n\nexport default Spinner;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport SeasonDisplay from './SeasonDisplay';\nimport Spinner from './Spinner';\n\n\nclass App extends React.Component {\n\n  state = { lat: null, errorMessage: '' };\n\n  componentDidMount() {\n    window.navigator.geolocation.getCurrentPosition(\n      position => this.setState({ lat: position.coords.latitude }), // succes callback\n      err => this.setState({ errorMessage: err.message }) // for any errors\n    );\n  }\n\n  renderContent() {\n    if (this.state.errorMessage && !this.state.lat) {\n      return <div>Error: {this.state.errorMessage}</div>;\n    }\n\n    if (!this.state.errorMessage && this.state.lat) {\n      return <SeasonDisplay lat={this.state.lat} />;\n    }\n\n    return <Spinner message=\"Please accept the location request\" />;\n  }\n\n  render() {\n    return (\n      <div className=\"border red\">\n        {this.renderContent()}\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.querySelector(\"#root\")\n);\n"],"sourceRoot":""}